using System;using System.Collections.Generic;using System.IO;namespace Exercise{    /// <summary>    /// ProgramA class should inherit, implement and complete the IGameReactor interface given in IGameReactor.cs    /// </summary>    public class ProgramA : IGameReactor    {        /// <summary>        /// Converts a character for movement into a numeric value derived from the IGameReactor.PlayerDirection enum        /// </summary>        /// <param name="direction">a single character representing a key direction from wasd or ijkl and space for not moving</param>        /// <returns>returns to numeric representation of the direction from PlayerDirection</returns>        public int Move(char direction)        {            if (direction.Equals('w') || direction.Equals('W') || direction.Equals('i') || direction.Equals('I'))                return (int)IGameReactor.PlayerDirection.North;            else if (direction.Equals('a') || direction.Equals('A') || direction.Equals('j') || direction.Equals('J'))                return (int)IGameReactor.PlayerDirection.West;            else if (direction.Equals('s') || direction.Equals('k') || direction.Equals('S') || direction.Equals('K'))                return (int)IGameReactor.PlayerDirection.South;            else if (direction.Equals('d') || direction.Equals('l') || direction.Equals('D') || direction.Equals('L'))                return (int)IGameReactor.PlayerDirection.East;            else if (direction.Equals(' '))                return (int)IGameReactor.PlayerDirection.Stay;            else                return 10;        }        /// <summary>        /// Converts an integer into the correct PlayerDirection enum value        /// </summary>        /// <param name="direction">the int value which needs to be converted into a MovmenentDirection </param>        /// <returns>the affiliated PlayerDirection value that equals the given int direction</returns>        public IGameReactor.PlayerDirection Move(int direction)        {            if (direction == 0)                return IGameReactor.PlayerDirection.East;            else if (direction == 1)                return IGameReactor.PlayerDirection.North;            else if (direction == 2)                return IGameReactor.PlayerDirection.West;            else if (direction == 3)                return IGameReactor.PlayerDirection.South;            else                 return IGameReactor.PlayerDirection.Stay;        }        /// <summary>        /// converts a given string to its upper case version and returns it        /// </summary>        /// <param name="message">the mixed case message</param>        /// <returns>an upper case version of the supplied message.</returns>        public string ConvertToUpperCase(string message)        {            return message.ToUpper();        }        static void Main(string[] args)        {            Console.WriteLine("Welcome to Exercise 6A!");        }    }}